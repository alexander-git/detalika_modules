<?php

namespace detalika\auth\models;

use dektrium\user\traits\ModuleTrait;
use detalika\auth\adapter\Db;
use detalika\clients2\forms\SimpleProfileForm;
use kartik\detail\DetailView;
use Yii;
use yii\base\Model;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

class RegistrationForm extends Model
{
    use ModuleTrait;
    protected $_passwordForm = null;
    protected $_clientForm = null;

    public function getPasswordForm() {
        if ($this->_passwordForm === null) {
            $this->_passwordForm = new PasswordForm();
        }

        return $this->_passwordForm;
    }

    public function setPasswordForm($passwordForm) {
        if (is_array($passwordForm)) {
            $this->_passwordForm->attributes = $passwordForm->attributes;
        } else {
            $this->_passwordForm = $passwordForm;
        }

        return $this;
    }

    public function getClientForm() {
        if ($this->_clientForm === null) {
            $this->_clientForm = new SimpleProfileForm();
            $this->_clientForm->setScenario('registration');
        }

        return $this->_clientForm;
    }

    public function setClientForm($clientForm) {
        if (is_array($clientForm)) {
            $this->clientForm->attributes = $clientForm->attributes;
        } else {
            $this->_clientForm = $clientForm;
        }

        return $this;
    }

    public function getFormFields() {
        return ArrayHelper::merge([
            [
                'group'=>true,
                'label'=>'Введите свои контактные данные',// и операторы свяжутся с Вами для подбора деталей',
                'rowOptions' => ['class'=>DetailView::TYPE_ACTIVE],
            ],
        ], $this->getClientForm()->getFormFields(), [
            [
                'group'=>true,
                'label'=>'Укажите пароль',
                'rowOptions' => ['class'=>DetailView::TYPE_ACTIVE],
            ],
        ], $this->getPasswordForm()->getFormFields());
    }

    public function validate($attributeNames = null, $clearErrors = true)
    {
        $result = $this->clientForm->validate($attributeNames, $clearErrors);
        $result = $this->passwordForm->validate($attributeNames, $clearErrors) && $result;

        return parent::validate($attributeNames, $clearErrors) && $result; // TODO: Change the autogenerated stub
    }

    public function load($data, $formName = null)
    {
        $result = $this->clientForm->load($data, $formName);
        $result = $this->passwordForm->load($data, $formName) && $result;

        return $result;
    }

    public function getAdapter() {
        /**
         * @var Db $adapter
         */
        return \yii::$app->profileAdapter;
    }

    public function register()
    {
        if (!$this->validate()) {
            return null;
        }

        $client = $this->getClientForm();
        $client->save();

        $userClass = $this->module->modelMap['User'];
        /**
         * @var User $user
         */
        $user = new $userClass;
        $user->setScenario(User::SCENARIO_CLIENT_REGISTRATION);
        $user->setAttributes($this->getPasswordForm()->attributes);

        $this->getAdapter()->setUserProfile($user, $client->profile);
        if (!$user->register()) {
            return null;
        }

        Yii::$app->session->setFlash(
            'info',
            Yii::t(
                'user',
                'Your account has been created and a message with further instructions has been sent to your email'
            )
        );

        return $user;
    }
}
