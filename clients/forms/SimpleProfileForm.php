<?php
/**
 * Created by PhpStorm.
 * User: execut
 * Date: 5/12/17
 * Time: 12:22 PM
 */

namespace detalika\clients\forms;


use detalika\clients\models\Contact;
use detalika\clients\models\ContactType;
use detalika\clients\models\Profile;
use detalika\clients\models\User;
use detalika\clients\OuterDependenciesInterface;
use dosamigos\formhelpers\PhoneInput;
use kartik\detail\DetailView;
use yii\base\Model;
use yii\widgets\MaskedInput;

class SimpleProfileForm extends Model
{
    public $phone;
    public $name;
    public $email;
    public $_profile = null;
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if ($profile = $this->getCurrentProfile()) {
            $this->email = $profile->email;
            $this->phone = $profile->phone;
            $this->name = $profile->name;
        }
    }

    public static function findByPk($id) {
        $profile = Profile::findByPk($id);
        $result = new self;
        $result->name = $profile->name;
        $result->email = $profile->email;
        $result->phone = $profile->phone;

        return $result;
    }

    /**
     * @return bool|mixed
     */
    public function getCurrentProfile()
    {
        return \yii::$container->get(OuterDependenciesInterface::class)->getCurrentProfile();
    }

    public function rules() {
        return [
            [['phone'], 'checkPhone'],
            [['name'], 'required',],
            [['phone', 'email',], 'checkRequiredContacts'],
            [['email'], 'email',],
            [['phone', 'email',], 'checkUniqueContacts', 'on' => 'registration'],
        ];
    }

    public function checkPhone() {
        if ($this->phone !== '+' && !preg_match('/\+\d \(\d\d\d\) \d\d\d-\d\d-\d\d?/', $this->phone)) {
            $this->addError('phone','Введите телефон в формате +# (###) ###-##-##');
            return false;
        }

        return true;
    }

    public function checkUniqueContacts() {
        $contactValue = $this->getContactsValues();
        if (!empty($contactValue)) {
            $profile = Profile::find()->byContactValue($contactValue)->one();
            if ($profile && $profile->user_id) {
                $this->addError('email','Пользователь с такими контактными данными уже существует. Пожалуйста, восстановите пароль.');
                return false;
            }

            if (!empty($this->email)) {
                $user = User::findOne(['email' => $this->email]);
                if ($user) {
                    $this->addError('email','Пользователь с такими контактными данными уже существует. Пожалуйста, восстановите пароль.');
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * @return array|Profile|null|\yii\db\ActiveRecord
     */
    protected function getProfile()
    {
        $contactQuery = Contact::find();
        $contactValue = $this->getContactsValues();
        if (!empty($contactValue)) {
            $profile = Profile::find()->byContactValue($contactValue)->one();
            if (!$profile) {
                $profile = new Profile();
            }
        } else {
            $profile = new Profile();
        }

        $this->_profile = $profile;

        $profile->name = $this->name;
        $phone = $this->replacedPhone;
        if (!empty($phone) && !$profile->hasContact(ContactType::TYPE_PHONE, $phone)) {
            $profile->addContact(ContactType::TYPE_PHONE, $phone, $profile->isNewRecord);
        }

        if (!empty($this->email) && !$profile->hasContact(ContactType::TYPE_EMAIL, $this->email)) {
            $profile->addContact(ContactType::TYPE_EMAIL, $this->email, empty($phone));
        }

        return $profile;
    }

    public function getReplacedPhone() {
        return preg_replace('/[^\d]/', '', $this->phone);
    }

    private function getCityByIp()
    {
        $userIp = Yii::$app->request->userIP;
        if ($userIp === null) {
            return '';
        }

        $location = Yii::$app->ipgeobase->getLocation($userIp, true);
        return $location['city'];
    }

    public function checkRequiredContacts($attribute) {
        $requiredContacts = ['phone', 'email'];
        foreach ($requiredContacts as $contact) {
            if (!empty($this->$contact)) {
                return true;
            }
        }

        $this->addError($attribute, 'Заполните один из контактов для связи');
        return false;
    }

    public function save() {
        $profile = $this->getProfile();
        if (!$profile->save()) {
            foreach ($profile->contacts as $contact) {
                var_dump($contact->attributes);
                echo '<br>';
            }
            var_dump($profile->errors);
            exit;
            return false;
        }

        return true;
    }

    public function getId() {
        return $this->profile->id;
    }

    public function getFormFields() {
        return [
            [
                'attribute' => 'name',
                'editModel' => $this,
                'viewModel' => $this,
            ],
            [
                'type' => DetailView::INPUT_WIDGET,
                'attribute' => 'phone',
                'editModel' => $this,
                'viewModel' => $this,
                'widgetOptions' => [
                    'class' => MaskedInput::class,
                    'mask' => '+7 (999) 999-99-99',
                ],
            ],
            [
                'attribute' => 'email',
                'editModel' => $this,
                'viewModel' => $this,
            ],
        ];
    }

    public function scenarios()
    {
        return [
            'default' => ['name', 'phone', 'email'],
            'registration' => ['name', 'phone', 'email'],
        ];
    }

    public function attributeLabels()
    {
        return [
            'name' => 'Имя',
            'phone' => 'Телефон',
            'email' => 'Email',
        ];
    }

    /**
     * @return array
     */
    protected function getContactsValues()
    {
        $contactValue = [];
        if (!empty($this->replacedPhone)) {
            $contactValue[] = [
                'type' => ContactType::TYPE_PHONE,
                'value' => $this->replacedPhone,
            ];
        }

        if (!empty($this->email)) {
            $contactValue[] = [
                'type' => ContactType::TYPE_EMAIL,
                'value' => $this->email,
            ];
        }

        return $contactValue;
    }
}