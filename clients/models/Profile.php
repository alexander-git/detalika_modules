<?php

namespace detalika\clients\models;

use yii\helpers\Url;
use yii\helpers\Html;
use yii\helpers\ArrayHelper;
use yii\data\ArrayDataProvider;

use kartik\grid\GridView;
use kartik\detail\DetailView;
use unclead\multipleinput\MultipleInput;
use unclead\multipleinput\MultipleInputColumn;
use execut\crudFields\Behavior;
use execut\crudFields\fields\Id;
use execut\crudFields\fields\Boolean;
use execut\crudFields\fields\HasOneSelect2;

use detalika\picking\widgets\ProfilePickingButton;
use detalika\clients\common\CurrentUser;
use detalika\clients\OuterRoutes;
use detalika\clients\models\Type;
use detalika\clients\models\base\ContactType;
use detalika\clients\models\base\CardType;
use detalika\clients\models\base\Source;
use detalika\clients\models\base\Shop;
use detalika\clients\models\base\User;
use detalika\clients\models\base\Profile as BaseProfile;
use detalika\clients\validators\UniqueItemFieldInArrayValidator;

class Profile extends BaseProfile
{   
    const SCENARIO_EDIT_BY_ACTIVE_USER = 'editByActiveUser';
    public static function find()
    {
        return new \detalika\clients\models\queries\Profile(self::class);
    }

    public function rules()
    {
        return ArrayHelper::merge(parent::rules(), [
            ['contacts', 'required', 'enableClientValidation' => false],
//            [
//                'contacts',
//                UniqueItemFieldInArrayValidator::className(),
//                'fieldName' => 'clients_contacts_type_id',
//                'message' => 'Тип контакта не должен повторяться.'
//            ],
            ['contacts', 'validateContactsIsMain'],

            [
                'cards', 
                UniqueItemFieldInArrayValidator::className(),
                'fieldName' => 'clients_cards_type_id',
                'message' => 'Тип скидочной карты не должен повторяться.'
            ],
        ]);
    }

    public function init()
    {
        if (empty($this->clients_type_id)) {
            $this->clients_type_id = Type::findIndividualId();
        }

        $this->visible = true;

        return parent::init(); // TODO: Change the autogenerated stub
    }


    public function formName()
    {
        return 'Profile';
    }
        
    public function scenarios() {
        $scenarios = parent::scenarios();
        
        $attributes = $this->attributes();
        unset($attributes['visible']);
        unset($attributes['user_id']);
        unset($attributes['clients_source_id']);
        unset($attributes['shop_id']);
        unset($attributes['comments']);        
        $scenarios[self::SCENARIO_EDIT_BY_ACTIVE_USER] = array_merge($attributes, [
            'contacts'
        ]);
            
        
        return $scenarios;
    }
    
    public function transactions()
    {
        $transactions = parent::transactions();
        $transactions[self::SCENARIO_EDIT_BY_ACTIVE_USER] = self::OP_ALL;
        return $transactions;
    }
    
    public function __toString() 
    {
        return $this->fullName;
    }
    
    public static function findByPk($id)
    {
        return Profile::findOne(['id' => $id]);
    }
    
    public function behaviors()
    {
        $authUserUrl = Url::to(OuterRoutes::getRoute('authUsers'));
        
        $usersEmailFieldName = User::getFieldName('email');
        
        $behaviors = parent::behaviors();
        $behaviors['fields'] = [
             'class' => Behavior::className(),
             'fields' => [
                'id' => [
                    'attribute' => 'id',
                    'class' => Id::className(),
                ],
                'surname' => ['attribute' => 'surname'],
                'name' => ['attribute' => 'name'],
                'patronymic' => ['attribute' => 'patronymic'],
                'user_id' => [
                    'attribute' => 'user_id',
                    'class' => HasOneSelect2::className(),
                    'nameAttribute' => $usersEmailFieldName,
                    'url' => $authUserUrl,
                ],
                'company_name' => ['attribute' => 'company_name'],
                'city' => ['attribute' => 'city'],
                'delivery_address' => ['attribute' => 'delivery_address'],  
//                'clients_type_id' => [],
                'visible' => [
                    'attribute' => 'visible',
                    'class' => Boolean::className(),
                ],
//                'contacts' => [],
//                'cards' => [],
//                'clients_source_id' => [],
//                'shop_id' => [],
//                'pickingProfileUser' => [],
             ],
         ];
        
        return $behaviors;
    }
    
    
    public function getFormFields()  
    {
        $fields = $this->getBehavior('fields')->getFormFields();
        
        $isCreate = $this->isNewRecord;
        
        // Для замыкания.
        $model = $this;
                
        $sourceName = '';
        if (!empty($this->sourceName)) {
            $sourceName = $this->sourceName;
        }

        $shopName = '';
        if (!empty($this->shopName)) {
            $shopName = $this->shopName;
        }

        $fields['clients_type_id'] = [
            'attribute' => 'clients_type_id',
            'value' => function($form, $widget) {
                return $widget->model->clientTypeName;
            },
            'type'=> DetailView::INPUT_DROPDOWN_LIST,
            'items'=> Type::getItemsList(),
        ];

        $fields['contacts'] = $this->getContactsField();

        $fields['cards'] = [
            'attribute' => 'cards',
            'type' => DetailView::INPUT_WIDGET,
            'format' => 'raw',
            'value' => $this->getCardsHtmlInViewMode(),
            'widgetOptions' => [
                'class' => MultipleInput::className(),
                'allowEmptyList' => true,
                'addButtonPosition' => MultipleInput::POS_HEADER,
                'columns' => [
                    [
                        'name' => 'id',
                        'type' => MultipleInputColumn::TYPE_HIDDEN_INPUT,
                        'defaultValue' => null,
                    ],
                    [
                        'name'  => 'clients_cards_type_id',
                        'type'  => MultipleInputColumn::TYPE_DROPDOWN,
                        'enableError' => true,
                        'title' => 'Тип',
                        'items' => CardType::getItemsList(),
                    ],
                    [
                        'name'  => 'name',
                        'type'  => MultipleInputColumn::TYPE_TEXT_INPUT,
                        'title' => 'Штрих-код',
                        'enableError' => true,
                        'defaultValue' => '',
                    ],
                ],
            ],
        ];

        $fields['clients_source_id'] = [
            'attribute' => 'clients_source_id',
            'type' => DetailView::INPUT_SELECT2,
            'value' => $sourceName,
            'widgetOptions' => [
                'options' => [
                    'placeholder' => '',
                ],
                'initValueText' =>  $sourceName,
                'data' => Source::getItemsList(),
                'pluginOptions' => [
                    'allowClear' => true,
                ],
            ],
        ];

        $fields['shop_id'] = [
            'attribute' => 'shop_id',
            'type' => DetailView::INPUT_SELECT2,
            'value' => $shopName,
            'widgetOptions' => [
                'options' => [
                    'placeholder' => '',
                ],
                'initValueText' =>  $sourceName,
                'data' => Shop::getItemsList(),
                'pluginOptions' => [
                    'allowClear' => true,
                ],
            ],
        ];

        if (!$isCreate) {
            $fields['pickingProfileUser'] = [
                'attribute' => 'pickingProfileUser',
                'label' => 'Подбор',
                'format' => 'raw',
                'displayOnly' => true,
                'value' => function() use ($model) {
                    $isPickingOn = CurrentUser::instance()->isPickingProfile($model);
                    return ProfilePickingButton::widget([
                        'clientProfileId' => $model->id,
                        'isPickingOn' => $isPickingOn,
                    ]);
                },
            ];
        }

        // Из ТЗ:
        // Реализовать виджет для редактирования данных активного
        // пользователя на базе DetailView, сценария и метода getFormFields со
        // всеми полями, что и в crud, кроме источника, аккаунта, комментария, активный
        // и магазин. Скидочные карты сделать только для чтения.
        if ($this->scenario === self::SCENARIO_EDIT_BY_ACTIVE_USER) {
            unset($fields['id']);
            unset($fields['user_id']);
            unset($fields['comments']);
            unset($fields['visible']);
            unset($fields['clients_source_id']);
            unset($fields['shop_id']);
            unset($fields['pickingProfileUser']);
            if (empty($this->cards)) {
                unset($fields['cards']);
            } else {
                $fields['cards'] = [
                    'attribute' => 'cards',
                    'format' => 'raw',
                    'value' => $this->getCardsHtmlInViewMode(),
                    'displayOnly' => true,
                ];
            }
        }
        
        if ($isCreate) {
            unset($fields['pickingProfileUser']);
        }

        return $fields;
    }       

    public function getContactsHtmlInViewMode() 
    {
        $contacts = $this->getContacts()->with(['contactType'])->all();
        $dataProvider = new ArrayDataProvider([
            'allModels' => $contacts,
        ]);

        $result = GridView::widget([
            'dataProvider' => $dataProvider,
            'showOnEmpty' => false,
            'summary' => '',
            'columns' => [
                [
                    'attribute' => 'contactType.name',
                    'label' => 'Тип',
                ],
                'value',
                'is_main:boolean',
            ],
        ]);         
        $result .= $this->getStubForMultipleInputCorrectWork('contacts');
        return  $result;
    }
 
    
    public function getCardsHtmlInViewMode() 
    {
        $cards = $this->getCards()->with(['cardType'])->all();
        $dataProvider = new ArrayDataProvider([
            'allModels' => $cards,
        ]);

        $result = GridView::widget([
            'dataProvider' => $dataProvider,
            'showOnEmpty' => false,
            'summary' => '',
            'columns' => [
                 [
                    'attribute' => 'cardType.name',
                    'label' => 'Тип',
                ],
                'name',
            ],
        ]);            
        $result .= $this->getStubForMultipleInputCorrectWork('cards');
        return  $result;
    }
    
    public function getProfileSourcesHtmlInViewMode() 
    {
        $profileSources = $this->getProfileSources()->with(['source'])->all();
        $dataProvider = new ArrayDataProvider([
            'allModels' => $profileSources,
        ]);

        $nameField = Source::getFieldName('name');
        $result = GridView::widget([
            'dataProvider' => $dataProvider,
            'showOnEmpty' => false,
            'summary' => '',
            'columns' => [
                [
                    'attribute' => "source.$nameField",
                ],
            ],
        ]);             
        $result .= $this->getStubForMultipleInputCorrectWork('profileSources');
        return  $result;
    }
 
    
    public function getProfileShopsHtmlInViewMode() 
    {
        $shops = $this->getProfileShops()->with(['shop'])->all();
        $dataProvider = new ArrayDataProvider([
            'allModels' => $shops,
        ]);
        
        $nameField = Shop::getFieldName('name');
        $result = GridView::widget([
            'dataProvider' => $dataProvider,
            'showOnEmpty' => false,
            'summary' => '',
            'columns' => [
                [
                    'attribute' => "shop.$nameField",
                ],
            ],
        ]);            
        $result .= $this->getStubForMultipleInputCorrectWork('profileShops');
        return  $result;
    }
    
    public function validateContactsIsMain($attribute)
    {
        $addErrorToRowItem = false;
        
        $items = $this->$attribute;
        if (count($items) === 0) {
            return;
        }
        
        $fieldName = 'is_main';
        $isMainIndexes = [];
        foreach ($items as $index => $row) {
            if ($row[$fieldName]) {
                $isMainIndexes []= $index;
            }
        }
        if (count($isMainIndexes) > 1) {
            $errorMessage = 'Должен быть только один предпочтительный контакт.';
            if ($addErrorToRowItem) {
                foreach ($isMainIndexes as $index) {
                    $key = $attribute . '[' . $index . '][' . $fieldName. ']';
                    $this->addError($key, $errorMessage);
                }
            } else {
                $this->addError($attribute, $errorMessage);
            }
            
        } elseif (count($isMainIndexes) === 0) {
            $errorMessage = 'Должен быть указан предпочтительный контакт.';
            if ($addErrorToRowItem) {
                foreach ($items as $index => $row) {
                    $key = $attribute . '['. $index .'][' . $fieldName. ']';
                    $this->addError($key, $errorMessage); 
                }
            } else {
                $this->addError($attribute, $errorMessage);   
            }
        }
    }    
    
    // Используется для правильного обновления при множественном вводе когда
    // удаляются все записи связной модели. Так как MultipleInput в этом случае
    // самостаяетльно ничего не отправляет, то SaveRelationsBehavior не поймет
    // что модель изменилась. Для корректной работы добавим постое поле с
    // именем связной модели, тогда будет отправлен пустой массив и 
    // SaveRelationsBehavior сделает то, что нужно.
    private function getStubForMultipleInputCorrectWork($attributeName)
    {
        return Html::input('hidden', Html::getInputName($this, $attributeName));
    }

    public function getMainContactType() {
        foreach ($this->contacts as $contact) {
            if ($contact->is_main) {
                return $contact->contactType->type;
            }
        }
    }

    /**
     * @return array
     */
    protected function getDefaultContacts()
    {

        $defaultPhone = new Contact();
        $defaultPhone->attributes = [
            'clients_contacts_type_id' => \detalika\clients\models\ContactType::getIdByType(\detalika\clients\models\ContactType::TYPE_PHONE),
            'is_main' => true,
        ];

        $defaultEmail = new Contact();
        $defaultEmail->attributes = [
            'clients_contacts_type_id' => \detalika\clients\models\ContactType::getIdByType(\detalika\clients\models\ContactType::TYPE_EMAIL),
        ];

        $contacts = [
            $defaultPhone,
            $defaultEmail,
        ];
        return $contacts;
    }

    /**
     * @return array
     */
    public function getContactsField()
    {
        $contacts = [
            'attribute' => 'contacts',
            'type' => DetailView::INPUT_WIDGET,
            'format' => 'raw',
            'value' => $this->getContactsHtmlInViewMode(),
            'widgetOptions' => [
                'class' => MultipleInput::className(),
                'addButtonPosition' => MultipleInput::POS_HEADER,
                'min' => 1,
                'columns' => [
                    [
                        'name' => 'id',
                        'type' => MultipleInputColumn::TYPE_HIDDEN_INPUT,
                        'defaultValue' => null,
                    ],
                    [
                        'name' => 'clients_contacts_type_id',
                        'type' => MultipleInputColumn::TYPE_DROPDOWN,
                        'enableError' => true,
                        'title' => 'Тип',
                        'items' => ContactType::getItemsList(),
                    ],
                    [
                        'name' => 'value',
                        'type' => MultipleInputColumn::TYPE_TEXT_INPUT,
                        'title' => 'Значение',
                        'enableError' => true,
                        'defaultValue' => '',
                    ],
                    [
                        'name' => 'is_main',
                        'title' => 'Предпочтительный',
                        'type' => MultipleInputColumn::TYPE_CHECKBOX,
                        'enableError' => true,
                        'defaultValue' => false,
                    ],
                ],
            ],
       ];

        return $contacts;
    }
}