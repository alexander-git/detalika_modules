<?php

namespace detalika\clients\models\base;

use detalika\clients\models\outer\ClientCarProfile;
use detalika\clients\models\outer\Order;
use detalika\clients\models\outer\Request;
use lhs\Yii2SaveRelationsBehavior\SaveRelationsBehavior;
use lhs\Yii2SaveRelationsBehavior\SaveRelationsTrait;
use yii\db\Expression;
use yii\behaviors\TimestampBehavior;

use yii\helpers\ArrayHelper;

use detalika\clients\models\Contact;
use detalika\clients\models\ContactType;
use detalika\clients\models\outer\ProfileUser;

/**
 * Class Profile
 *
 * @property Contact[] $contacts
 * @package detalika\clients\models\base
 */
class Profile extends \detalika\auth\models\Profile
{
    use SaveRelationsTrait;

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            'saveRelations' => [
                'class'     => SaveRelationsBehavior::className(),
                'relations' => [
                    'contacts',
                    'cards',
                ],
            ],
            'timestamp' => [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created',
                'updatedAtAttribute' => 'updated',
                'value' => (new Expression('NOW()')),
            ],
        ]);
    }

    public static function tableName() 
    {
        return 'clients_profiles';
    }

    public function __get($name)
    {
        if ($name === 'phone') {
            return $this->getPhone();
        }

        if ($name === 'email') {
            return $this->getEmail();
        }

        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        if ($name === 'phone') {
            return $this->setPhone($value);
        }

        if ($name === 'email') {
            return $this->setEmail($value);
        }

        return parent::__set($name, $value); // TODO: Change the autogenerated stub
    }

    public function attributes()
    {
        $attributes = parent::attributes(); // TODO: Change the autogenerated stub
//        $attributes[] = 'phone';
//        $attributes[] = 'email';

        return $attributes;
    }

    public function getEmail() {
        if ($emailModel = $this->findMainContactByType(ContactType::TYPE_EMAIL)) {
            return $emailModel->value;
        }
    }

    public function setPhone($phoneValue) {
        if (empty($phoneValue)) {
            return;
        }

        $phoneValue = str_replace(['+', '(', ')', '-'], '', $phoneValue);

        return $this->setMainContactValueByType($phoneValue, ContactType::TYPE_PHONE);
    }

    public function setEmail($email) {
        if (empty($email)) {
            return;
        }

        return $this->setMainContactValueByType($email, ContactType::TYPE_EMAIL);
    }

    public function hasContact($type, $value) {
        foreach ($this->contacts as $contact) {
            if ($contact->isEqual($type, $value)) {
                return true;
            }
        }

        return false;
    }

    public function addContact($type, $value, $isMain = false) {
        $contact = Contact::createFromTypeAndValue($type, $value);
        if ($isMain) {
            foreach ($this->contacts as $contact2) {
                if ($contact2->is_main) {
                    $contact2->is_main = false;
                }
            }
        }
        $contact->is_main = $isMain;
        $contacts = $this->contacts;
        $contacts[] = $contact;
        $this->contacts = $contacts;

        return $this;
    }

    public function getPhone() {
        if ($phoneModel = $this->findMainContactByType(ContactType::TYPE_PHONE)) {
            return $phoneModel->value;
        }
    }

    public function findMainContactByType($type) {
        $typeId = ContactType::getIdByType($type);
        if (!$typeId) {
            return;
        }

        if ($this->isNewRecord) {
            return null;
        }

        $lastContact = null;
        foreach ($this->contacts as $contact) {
            if ($contact->clients_contacts_type_id == $typeId) {
                $lastContact = $contact;
                if ($contact->is_main) {
                    return $contact;
                }
            }
        }

        return $lastContact;
    }
    
    public function rules()
    {
        $shopsIdFieldName = Shop::getFieldName('id');
        $usersIdFieldName = User::getFieldName('id');
        
        return [
            ['name', 'requiredForIndividualClientType', 'skipOnEmpty' => false],
            ['name', 'string', 'max' => 255],
            
//            ['surname', 'requiredForIndividualClientType', 'skipOnEmpty' => false],
            ['surname', 'string', 'max' => 255],
            
            ['patronymic', 'string', 'max' => 255],
            
            ['company_name', 'requiredCompanyName', 'skipOnEmpty' => false],
            ['company_name', 'string', 'max' => 255],

            ['city', 'string', 'max' => 255],
            
            ['delivery_address', 'string', 'max' => 255],
            
            ['visible', 'boolean'],
            ['visible', 'default', 'value' => true],
            
            ['comments', 'string', 'max' => 255],
            
            ['clients_type_id', 'required'],
            ['clients_type_id', 'integer'],
            [
                'clients_type_id', 
                'exist',
                'skipOnError' => true, 
                'targetClass' => Type::className(), 
                'targetAttribute' => ['clients_type_id' => 'id']
            ],
            
            [
                'clients_source_id',
                'exist',
                'skipOnError' => true, 
                'targetClass' => Source::className(), 
                'targetAttribute' => ['clients_source_id' => 'id' ]
            ],
            
            [
                'shop_id', 
                'exist',
                'skipOnError' => true, 
                'targetClass' => Shop::className(), 
                'targetAttribute' => ['shop_id' => $shopsIdFieldName ]
            ],
            
//            ['user_id', 'required'],
            ['user_id', 'integer'],
            [
                'user_id',
                'exist',
                'skipOnError' => true, 
                'targetClass' => User::className(), 
                'targetAttribute' => ['user_id' => $usersIdFieldName ]
            ],
        ];
    }
    
    public function attributeLabels() 
    {
        return [
            'id' => 'ID',
            'name' => 'Имя',
            'surname' => 'Фамилия',
            'phone' => 'Телефон',
            'patronymic' => 'Отчество',
            'company_name' => 'Название организации',
            'city' => 'Город',
            'delivery_address' => 'Адрес доставки',
            'visible' => 'Активный',
            'clients_type_id' => 'Тип клиента',
            'comments' => 'Комментарий',
            'created' => 'Дата создания',
            'updated' => 'Дата обновления',
            'clients_source_id' => 'Источник',
            'shop_id' => 'Магазин',
            'contacts' => 'Контакты',
            'cards' => 'Скидочные карты',
            'user_id' => 'Аккаунт',
        ];
    }
    
    public function getType() 
    {
        return $this->hasOne(Type::className(), ['id' => 'clients_type_id']);
    }

    public function getClientType() {
        return $this->getType();
    }
    
    public function getContacts()
    {
        return $this->hasMany(Contact::className(), ['clients_profile_id' => 'id']);
    }
    
    public function getCards()
    {
        return $this->hasMany(Card::className(), ['clients_profile_id' => 'id']);
    }

    public function getSource()
    {
        return $this->hasOne(Source::className(), ['id' => 'clients_source_id']);
    }
    
    public function getShop()
    {
        $shopsIdFieldName = Shop::getFieldName('id');
        return $this->hasOne(Shop::className(), [$shopsIdFieldName => 'shop_id']);
    }
    
    public function getUser()
    {
        $usersIdFieldName = \detalika\clients\models\User::getFieldName('id');
        return $this->hasOne(\detalika\clients\models\User::className(), [$usersIdFieldName => 'user_id']);
    }
    
    public function getProfileUsers()
    {
        $profileUsersProfileIdFieldName = ProfileUser::getFieldName('profile_id');
        return $this->hasMany(ProfileUser::className(), [$profileUsersProfileIdFieldName => 'id']);
    }

    public function getOrders() {
        $profileUsersProfileIdFieldName = Order::getFieldName('clients_profile_id');
        return $this->hasMany(Order::className(), [$profileUsersProfileIdFieldName => 'id']);
    }

    public function getRequests() {
        $profileUsersProfileIdFieldName = Request::getFieldName('clients_profile_id');

        return $this->hasMany(Request::className(), [$profileUsersProfileIdFieldName => 'id']);
    }

    public function getRequestsClientCarProfiles() {
        $profileUsersProfileIdFieldName = ClientCarProfile::getFieldName('clients_profile_id');

        return $this->hasMany(ClientCarProfile::className(), [$profileUsersProfileIdFieldName => 'id']);
    }
        
    public function transactions()
    {
        return [
            self::SCENARIO_DEFAULT =>  self::OP_ALL,
        ];   
    }
    
    public function beforeDelete()
    {
        if (!parent::beforeDelete()) {
            return false;
        }
        
        foreach ($this->contacts as $contact) {
            if (!$contact->delete()) {
                throw new \Exception();
            }
        }
        
        foreach ($this->cards as $card) {
            if (!$card->delete()) {
                throw new \Exception();
            }
        }

        foreach ($this->orders as $order) {
            if (!$order->delete()) {
                throw new \Exception();
            }
        }

        foreach ($this->requests as $request) {
            if (!$request->delete()) {
                throw new \Exception();
            }
        }

        foreach ($this->requestsClientCarProfiles as $carProfile) {
            if (!$carProfile->delete()) {
                throw new \Exception();
            }
        }

        return true;
    }
    
    public function getClientTypeName()
    {
        if ($this->type === null) {
            return null;
        }
        
        return $this->type->name;
    }
    
    public function getSourceName()
    {
        if (empty($this->source)) {
            return null;
        }

        return $this->source->name;
    }
    
    public function getShopName()
    {
        if (empty($this->shop)) {
            return null;
        }
        
        $nameField = Shop::getFieldName('name');
        return $this->shop->$nameField;
    }
    
    public function getUserEmail()
    {
        if (empty($this->user)) {
            return null;
        }
        
        $emailField = User::getFieldName('email');
        return $this->user->$emailField;
    }
    
    public function getFullName()
    {
        $name = '';
        $nameParts = [];
        if (!empty($this->name)) {
            $nameParts []= $this->name;
        }
        if (!empty($this->surname)) {
            $nameParts []= $this->surname;
        }
        if (!empty($this->patronymic)) {
            $nameParts []= $this->patronymic;
        }
        
        if (count($nameParts) > 0) {
            $name = implode(' ', $nameParts);
        }
        if (!empty($this->company_name)) {
           if ($name !== '') {
               $name .= ' - ' . $this->company_name;
           } else {
               $name = $this->company_name;
           }
        }

        return $name;
    }
    
    public function requiredForIndividualClientType($attribute, $params, $validator)
    {
        if (!empty($this->clients_type_id)) {
            if ($this->type->isIndividual && empty($this->$attribute)) {
                $this->addError($attribute, 'Обязательно для Физических лиц');
            }
        }
    }
    
    public function requiredCompanyName($attribute, $params, $validator)
    {
        if (!empty($this->clients_type_id)) {
            if (!$this->isPrivatePerson && empty($this->company_name)) {
                $this->addError($attribute, 'Обязательно, если клиент не "Частное лицо"');
            }
        }
    }
    
    public function getIsPrivatePerson()
    {
        if (empty($this->clients_type_id)) {
            return false;
        }
        
        return (int) $this->clients_type_id === Type::getPrivatePersonClientTypeId();
    }

    /**
     * @param $phoneValue
     * @param $phoneTypeId
     * @return $this
     */
    protected function setMainContactValueByType($phoneValue, $contactType)
    {
        $contactTypeId = ContactType::getIdByType($contactType);
        if (!$contactTypeId) {
            return $this;
        }

        $phone = $this->findMainContactByType($contactType);
        if ($phone && $phone->is_main) {
            $phone->value = $phoneValue;
            $this->contacts = $this->contacts;
            return $this;
        }

        $attributes = [
            'value' => $phoneValue,
            'clients_contacts_type_id' => $contactTypeId,
            'is_main' => $contactType === ContactType::TYPE_PHONE,
        ];

        $phone = new Contact($attributes);
        $contacts = $this->contacts;
        $contacts[] = $phone;
        $this->contacts = $contacts;

        return $this;
    }
}