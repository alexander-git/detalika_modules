<?php

namespace detalika\requests\models\user\forms;

use detalika\requests\common\CommonUrls;
use detalika\requests\common\CurrentUser;
use detalika\requests\common\AccessCheck;
use detalika\requests\models\base\ClientCar;
use detalika\requests\models\base\RequestStatus;
use detalika\requests\models\forms\RequestForm as BaseRequestForm;
use detalika\requests\models\user\relation\RequestPositionInRequestSearch;
use yii\helpers\ArrayHelper;

// Сейчас эта форма используется только для создания запросов. Тем не менее тут
// есть код который может выполнятся только при обновлении.
class RequestForm extends BaseRequestForm
{
    const SCENARIO_FROM_OTHER_USER = 'from_other_user';
    public function getRequestPositionsInRequest()
    {
        return $this->hasMany(RequestPositionInRequestSearch::className(), ['requests_request_id' => 'id']);
    }
          
    public function rules() 
    {
        $rules = parent::rules();
        $rules['requestsClientCarIdValidateOnlyCurrentUserCars'] = [
            'requests_client_car_id',
            'validateOnlyCurrentUserCars',
            'skipOnEmpty' => true,
            'on' => self::SCENARIO_DEFAULT,
        ];
        
        return $rules;
    }

    public function scenarios()
    {
        return ArrayHelper::merge(parent::scenarios(), [
            self::SCENARIO_FROM_OTHER_USER => array_merge($this->attributes(), ['requestPositions']),
        ]); // TODO: Change the autogenerated stub
    }

    public function beforeValidate()
    {
        // По-нормальному эти значения нужно при создании записи
        // устанавливать в контроллере и запрещать их загрузку через сценарий
        // Но SaveRelationsBehavior не работает со сценариями кроме 
        // 'default', поэтому установим нужные значения перед валидацией. 
        // Хотя SaveRelationsBehavior используется не везде, но в будещем 
        // оно может понадобиться. 
        // При обновлении установим старые значения, так как пользователь их
        // менять не может.
        if ($this->isNewRecord) {            
            $this->visible = true;
            // При создании записи установим текущего пользователя по умолчанию.
            $id = $this->getDefaultProfileId();
            $this->clients_profile_id = $id;
            // Статус установим как для созданной записи.
            $this->requests_request_status_id = RequestStatus::getNewRequestStatusId();
        } else {
            // Комплектовщик может менять статус.
            if (!AccessCheck::instance()->canCurrentUserPicking()) {
                $oldModel = self::findOne(['id' => $this->id]);
                $this->visible = $oldModel->visible;
                $this->clients_profile_id = $oldModel->clients_profile_id;
                $this->requests_request_status_id = $oldModel->requests_request_status_id;
            }
        }
        
        return parent::beforeValidate();
    }
    
    public function getFormFields()
    {   
        $formFields = parent::getFormFields();
        
        $isCreate = $this->isNewRecord;
        if ($isCreate) {
            return $this->getFormFieldsWhenCreate($formFields);
        } else {
            return $this->getFormFieldsWhenUpdate($formFields);
        }
    }
    
    private function getFormFieldsWhenCreate($formFields)
    {
        $clientCarsUrl = CommonUrls::getUserClientCarsUrlForAjaxList(); 
        
        $requestStatusName = null;
        if (!empty($this->requestStatusName)) {
            $requestStatusName = $this->requestStatusName;
        }
        
        unset($formFields['visible']);
        unset($formFields['clients_profile_id']);
        
        if (isset($formFields['requestPositions'])) {
            // Поле requestPositions есть только при создании запроса.
            
            // Пользователелю можно редактировать только название.
            $requestPostionsColumns = $formFields['requestPositions']['widgetOptions']['columns'];
            // Заголовк поля(title) не нужен, так как у нас в мультиформе
            // только одно поле name.
            unset($requestPostionsColumns['name']['title']); 
            unset($requestPostionsColumns['goods_article_id']);
            unset($requestPostionsColumns['goods_good_id']);
            unset($requestPostionsColumns['link_to_search']);
            
            $formFields['requestPositions']['widgetOptions']['columns'] = $requestPostionsColumns;
        }
        
        // Автомобили текущего пользователя.
        $clientCarIdField = $formFields['requests_client_car_id'];
        $clientCarIdField['widgetOptions']['disabled'] = false;
        $clientCarIdField['widgetOptions']['pluginOptions']['ajax']['url'] = $clientCarsUrl;
   
        $clientCarIds = CurrentUser::instance()->getClientCarIds();
        // Если у пользователя одна машина установим её по умолчанию.
        if (count($clientCarIds) === 1) {
            $clientCarId = $clientCarIds[0];
            $clientCar = ClientCar::findOne(['id' => $clientCarId]);
            $this->requests_client_car_id = $clientCarId;
            $clientCarFullName = $clientCar->carFullName;
            $clientCarIdField['value'] = $clientCarFullName;
            $clientCarIdField['widgetOptions']['initValueText'] = $clientCarFullName;
        }
        
        
        $formFields['requests_client_car_id'] = $clientCarIdField;
        
        // Статус только для чтения.
        $requestStatusIdField = [
            'attribute' => 'requests_request_status_id',
            'value' => $requestStatusName,
            'displayOnly' => true,
            'visible' => false,
        ];
        $formFields['requests_request_status_id'] = $requestStatusIdField;
        
        return $formFields;
    }

    private function getFormFieldsWhenUpdate($formFields)
    {
        unset($formFields['id']);
        unset($formFields['visible']);
        unset($formFields['clients_profile_id']);
        unset($formFields['requestPositions']);
        unset($formFields['requests_client_car_id']);
        unset($formFields['created']);
        unset($formFields['updated']);
        unset($formFields['requestPositionsCount']);
        unset($formFields['requestMessagesCount']);
        
        return $formFields;
    }
    
    public function validateOnlyCurrentUserCars($attribute, $params, $validator)
    {
        if (!CurrentUser::instance()->hasClientCarOnId($this->requests_client_car_id)) {
            $this->addError($attribute, 'Автомобиль должен относиться к текущему пользователю.');
        }
    }

    /**
     * @return mixed|null
     */
    protected function getDefaultProfileId()
    {
        $id = CurrentUser::instance()->getClientProfileId();
        return $id;
    }
}